// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package models

import (
	"errors"
	"fmt"
)

const (
	// ControlSchemaGround is a ControlSchema of type Ground.
	ControlSchemaGround ControlSchema = iota
	// ControlSchemaFixed is a ControlSchema of type Fixed.
	ControlSchemaFixed
	// ControlSchemaRotor is a ControlSchema of type Rotor.
	ControlSchemaRotor
	// ControlSchemaQuad is a ControlSchema of type Quad.
	ControlSchemaQuad
)

var ErrInvalidControlSchema = errors.New("not a valid ControlSchema")

const _ControlSchemaName = "groundfixedrotorquad"

var _ControlSchemaMap = map[ControlSchema]string{
	ControlSchemaGround: _ControlSchemaName[0:6],
	ControlSchemaFixed:  _ControlSchemaName[6:11],
	ControlSchemaRotor:  _ControlSchemaName[11:16],
	ControlSchemaQuad:   _ControlSchemaName[16:20],
}

// String implements the Stringer interface.
func (x ControlSchema) String() string {
	if str, ok := _ControlSchemaMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ControlSchema(%d)", x)
}

var _ControlSchemaValue = map[string]ControlSchema{
	_ControlSchemaName[0:6]:   ControlSchemaGround,
	_ControlSchemaName[6:11]:  ControlSchemaFixed,
	_ControlSchemaName[11:16]: ControlSchemaRotor,
	_ControlSchemaName[16:20]: ControlSchemaQuad,
}

// ParseControlSchema attempts to convert a string to a ControlSchema.
func ParseControlSchema(name string) (ControlSchema, error) {
	if x, ok := _ControlSchemaValue[name]; ok {
		return x, nil
	}
	return ControlSchema(0), fmt.Errorf("%s is %w", name, ErrInvalidControlSchema)
}

// MarshalText implements the text marshaller method.
func (x ControlSchema) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ControlSchema) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseControlSchema(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DeviceTypeG27 is a DeviceType of type G27.
	DeviceTypeG27 DeviceType = iota
)

var ErrInvalidDeviceType = errors.New("not a valid DeviceType")

const _DeviceTypeName = "g27"

var _DeviceTypeMap = map[DeviceType]string{
	DeviceTypeG27: _DeviceTypeName[0:3],
}

// String implements the Stringer interface.
func (x DeviceType) String() string {
	if str, ok := _DeviceTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DeviceType(%d)", x)
}

var _DeviceTypeValue = map[string]DeviceType{
	_DeviceTypeName[0:3]: DeviceTypeG27,
}

// ParseDeviceType attempts to convert a string to a DeviceType.
func ParseDeviceType(name string) (DeviceType, error) {
	if x, ok := _DeviceTypeValue[name]; ok {
		return x, nil
	}
	return DeviceType(0), fmt.Errorf("%s is %w", name, ErrInvalidDeviceType)
}

// MarshalText implements the text marshaller method.
func (x DeviceType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *DeviceType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDeviceType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// InputTypeButton is a InputType of type Button.
	InputTypeButton InputType = iota
	// InputTypeAxis is a InputType of type Axis.
	InputTypeAxis
)

var ErrInvalidInputType = errors.New("not a valid InputType")

const _InputTypeName = "buttonaxis"

var _InputTypeMap = map[InputType]string{
	InputTypeButton: _InputTypeName[0:6],
	InputTypeAxis:   _InputTypeName[6:10],
}

// String implements the Stringer interface.
func (x InputType) String() string {
	if str, ok := _InputTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("InputType(%d)", x)
}

var _InputTypeValue = map[string]InputType{
	_InputTypeName[0:6]:  InputTypeButton,
	_InputTypeName[6:10]: InputTypeAxis,
}

// ParseInputType attempts to convert a string to a InputType.
func ParseInputType(name string) (InputType, error) {
	if x, ok := _InputTypeValue[name]; ok {
		return x, nil
	}
	return InputType(0), fmt.Errorf("%s is %w", name, ErrInvalidInputType)
}

// MarshalText implements the text marshaller method.
func (x InputType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *InputType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseInputType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
